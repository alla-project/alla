@
@ 
@alphabet
@define
@macro
@name
@singlename
@doublename
@override
@extends
@see
@parallel
@flat
@fractal

@digits 0123456789.
@alphabet ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_@
@alphabet @~`'"\|/.,;:?!<>+-=()[]{}*&^%$#

@define @space @ 
@define @endline @

@define def @define

@macro @doublename // @endline @name expression @endline
@macro @doublename // @endline @endline

// Теперь можно писать однострочные комментарии :)
// И пустые тоже:
//
// Рассмотрим теперь все выше написанное
// =====================================================================
// Язык alla является функциональным, и программа на нем состоит из
// последовательно записанных вызовов функций. Изначально в языке
// имеется небольшой набор встроенных функций, реализация которых
// определена компилятором. Другие функции строятся на основе встроенных
// функций и определяются с помощью встроенной функции @define, которая
// имеет вид:
//
// @define <определяемое>
// или
// @define <определяемое> <определение>
//
// Тут сразу стоит сделать одно замечание. В данном описании мы использовали
// пробелы и переводы строк как естественно воспринимающиеся разделители в
// тексте между словами и выражениями. В языке alla функции выстраиваются в
// цепочку, в которой выполняются последовательно при вызове самой первой.
// И чтобы отличать один элемент последовательности от другого, а также
// чтобы различать границы слов внутри таких элементов, нам нужны символы-
// разделители.
//
// В alla есть встроенная функция @, с помощью которой изначально и задаются
// разделители. Специфика функции @ состоит в том, что её вызвать необходимо в
// самом начале программы, причем два раза: первый раз - для задания символа-
// границы выражений, второй - для задания символа-границы слов. В противном
// случае мы никак не сможем разделять слова и выражения, т. е. вся наша
// программа превратится в одно сплошное длинное слово.
//
// Функция @ принимает один аргумент - символ, который в дальнейшем должен
// интерпретироваться как разделитель выражений (при первом вызове) и символ,
// который должен будет интерпретироваться как разделитель слов (при втором вызове).
// При первом вызове сразу за @ следует символ перехода на новую строку - именно
// он будет служить границей выражений; при втором вызове - за символом @ следует
// пробел, который будет в дальнейшем интерпретироваться как граница слов. После
// пробела идет переход на новую строку - и как было объявлено в самой первой строке,
// он означает границу выражения.
// Стоит заметить, что граница выражения в определенных ситуациях может восприниматься
// как граница между словами внутри одного выражения - тогда, когда все написанные
// слова, от одной границы выражений до другой, не могут интерпретироваться как
// выражение. В этом случае граница выражений воспринимается как разделитель слов (так
// как она разделяет выражения, то слова и подавно), и к выражению добавляются все слова
// до следующей границы. Теперь предпринимается новая попытка интерпретировать выражение.
// Если не удалось - процедура повторяется снова.
//
// Еще выжно понимать, что граница - это определенность, которая не только разделяет, но
// и связывает два нечто. Как отдельные, разделенные слова в конечном итоге
// интерпретируются последовательно в рамках единого выражения, так и выражения - одно
// за другим - выстраиваются в цепочку выполнения. Это означает, что границу выражения
// можно представить как функцию, которая принимает два аргумента - предыдущее и следующее
// выражение - и которая строит последовательную цепочку выполнения из них. Сначало первое,
// а затем второе. (? - если выполнение последовательное. Или оба одновременно - в
// параллельном случае.)
//
// Теперь вернемся к встроенной функции @define. Эта функция занимается тем, что утверждает
// соотнесение своего первого аргумента - некоего неопределенного выражения - со вторым, -
// выражением определенным. Таким образом, функция @define дает определенность своему первому
// аргументу, и в дальнейшем обращение к нему в программе будет отсылать ко второму аргументу -
// определенному выражению.
// 
// С помощью перегруженной для одного аргумента версии @define мы можем также объявлять
// некоторые имена, не определяя их. Это позволяет видеть их в программе и обращаться к ним,
// но во выполниться они не могут, пока не будет предоствалена их реализация.
// 
// TODO: описать до конца все выше написанное


def = @override
def . @see
def , @endline
def ; @parallel
